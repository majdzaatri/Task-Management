[{"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\index.js":"1","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\App.js":"3","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\EditableTaskDescription.js":"4","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\Calendar.js":"5","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Layout.js":"6","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\TasksList.js":"7","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sidebar.js":"8","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\header.js":"9","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\build.js":"10","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\styles.js":"11","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sort.js":"12","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Navbar.js":"13","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Task.js":"14","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\SearchBar.js":"15","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\getTasks.js":"16"},{"size":876,"mtime":1613001326679,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1611433103663,"results":"19","hashOfConfig":"18"},{"size":3903,"mtime":1612997945103,"results":"20","hashOfConfig":"18"},{"size":12730,"mtime":1613001903904,"results":"21","hashOfConfig":"18"},{"size":1543,"mtime":1612995171348,"results":"22","hashOfConfig":"18"},{"size":522,"mtime":1612441102182,"results":"23","hashOfConfig":"18"},{"size":3121,"mtime":1612995505800,"results":"24","hashOfConfig":"18"},{"size":588,"mtime":1612441102184,"results":"25","hashOfConfig":"18"},{"size":955,"mtime":1612441102180,"results":"26","hashOfConfig":"18"},{"size":606,"mtime":1612441102179,"results":"27","hashOfConfig":"18"},{"size":793,"mtime":1612997424883,"results":"28","hashOfConfig":"18"},{"size":2088,"mtime":1612441102185,"results":"29","hashOfConfig":"18"},{"size":693,"mtime":1612441102183,"results":"30","hashOfConfig":"18"},{"size":993,"mtime":1612919552066,"results":"31","hashOfConfig":"18"},{"size":568,"mtime":1612441528103,"results":"32","hashOfConfig":"18"},{"size":199,"mtime":1612627642151,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1k1sgcd",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\index.js",[],["70","71"],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\App.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\EditableTaskDescription.js",["72","73"],"import React, {useState} from \"react\";\nimport {DropdownButton, Dropdown, Button, Form , Row, Col} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Rating from \"react-rating\";\n// import \"../App.css\"\nimport axios from 'axios'\nimport useFormFields from '@usereact/use-form-fields'\nimport { useAlert } from 'react-alert'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nvar dateFormat = require(\"dateformat\");\n\n\n\nconst EditableTaskDescription = ({isEdit, deleteTask,selectedTask, setIsEdit,newTask,setTasksCount,tasksCount,setSelectedTask ,hideModal, setIsDeleteTask}) => {\n    const alert = useAlert()\n\n    var intialPriority = 0\n    if(newTask){\n        intialPriority = 0\n    } else {\n        intialPriority ='5'\n    }\n    const [priority, setPriority] = useState(intialPriority)\n\n    const onChangePriority = (value) => {\n        setPriority(value);\n        values.priority = value\n    }\n\n\n    \n\n    const initialValues = {\n        \"id\": Math.floor(Math.random() * 99999999),\n        \"name\": \"\",\n        \"title\": \"\",\n        \"priority\": 0,\n        \"category\": \"red\",\n        \"categoryDetails\": \"Home\",\n        \"date\": new Date(),\n        \"status\": \"New\"\n      }\n\n    \n      var inistialSelectedTask = {\n        \"id\": selectedTask.id,\n        \"name\": selectedTask.name,\n        \"title\": selectedTask.title,\n        \"priority\": selectedTask.priority,\n        \"category\": selectedTask.category,\n        \"date\": selectedTask.date,\n        \"status\": selectedTask.status\n      }     \n\n      const handleSubmit = e => {\n        e.preventDefault();\n        console.log('values: ', values)\n\n        axios.post('/add_task', {\n            id: values.id,\n            name: values.name,\n            title: values.title,\n            priority: values.priority,\n            category: values.category,\n            categoryDetails: values.categoryDetails,\n            date: values.date,\n            status: values.status\n        }).then((response) => {\n        console.log(response)\n        }).catch(() => {\n          alert('Error retrieving data!!!');\n        });  \n        console.log(values)\n        alert.show('Task \"' + values.title + '\" has been created successfully')\n        setTasksCount(!tasksCount) \n      }\n\n      const submit = () => {\n        confirmAlert({\n        //   title: 'Confirm to submit',\n          message: 'Are you sure you want to delete task\"' + selectedTask.title + '\"?',\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => {\n                axios.post('/delete_Task', {\n                    id: selectedTask.id,\n                }).then((response) => {\n                console.log(response)\n                }).catch(() => {\n                  alert('Error retrieving data!!!');\n                });  \n                setIsDeleteTask(false)\n                alert.show('Task \"' + selectedTask.title + '\" has been deleted successfully')\n                setTasksCount(!tasksCount) \n              }\n            },\n            {\n              label: 'No',\n              onClick: () => {alert.show('nothing to delete')\n              setIsDeleteTask(false)\n            }\n            }\n          ]\n        });\n      };\n\n      const handleEdit = e => {\n        e.preventDefault();\n        console.log('values: ', editValues)\n        axios.post('/update_task', {\n            id: selectedTask.id,\n            name: selectedTask.name,\n            title: selectedTask.title,\n            priority: selectedTask.taskPriority,\n            category: selectedTask.category,\n            categoryDetails: selectedTask.categoryDetails,\n            date: selectedTask.date,\n            status: selectedTask.status\n        }).then((response) => {\n        console.log(response)\n        alert.show('Task \"' + selectedTask.title + '\" has been updated successfully')\n\n        }).catch(() => {\n          alert('Error retrieving data!!!');\n        });          \n        setIsEdit(!isEdit)\n        setTasksCount(!tasksCount) \n\n  }\n        if (deleteTask === true){\n            submit()\n        }\n\n      const { values, fields } = useFormFields(initialValues)\n      const [choosenStatus, setChoosenStatus] = useState(\"New\")\n      const [choosenCategory, setchoosenCategory] = useState(\"red\")\n      const [choosenCategoryDetails, setchoosenCategoryDetails] = useState(\"Home\")\n\n      const [editValues, seteditValues] = useState(inistialSelectedTask)\n\n\n      const [startDate, setStartDate] = useState(new Date());\n\n      const onDateChange = (date) => {\n        setStartDate(date)\n        values.date = date\n    }\n    return (\n        \n        <Form onSubmit={handleSubmit} className=\"p-5\">\n        \n            <Form.Group controlId=\"exampleForm.ControlInput1\">\n                {(newTask)?<input placeholder=\"Enter task title\" {...fields.title} className=\"title-input\"  / >:\n                    ((!isEdit)?<div className=\"text-center\" style={{fontSize: \"xxx-large\"}}>{selectedTask.title}</div>\n                :<input value={selectedTask.title} onChange={(e)=> setSelectedTask({...selectedTask ,title:e.target.value})}\n                 className=\"title-input\"/>)}\n            </Form.Group>\n\n\n            <Form.Group className=\"\">\n                <Form.Label placeholder=\"task Title\" className=\"font-weight-bold\">\n                    Descriptions:\n                </Form.Label>\n                {(newTask)?<Form.Control as=\"textarea\" {...fields.name} placeholder=\"Enter description if needed\" rows={3} />\n                    :<Form.Control as=\"textarea\" value={selectedTask.name} onChange={(e)=> setSelectedTask({...selectedTask ,name:e.target.value})} rows={3} disabled={!isEdit} />\n                }\n            </Form.Group>\n\n                \n            <Row className=\"my-5  mx-0 p-0\">\n                <Col className=\"pl-0\">\n                    <Form.Label className=\"font-weight-bold\">Status:</Form.Label>\n                    {(newTask)?\n                    <DropdownButton id=\"dropdown-basic-button\"  size=\"sm\" variant=\"secondary\" title={choosenStatus}>\n                        <Dropdown.Item as=\"button\"  value = 'New' onClick={(e) =>  {setChoosenStatus(\"new\") \n                        e.preventDefault()\n                        values.status = 'new'}}  >New</Dropdown.Item>\n                        <Dropdown.Item as=\"button\"  value = 'in progress'  onClick={(e) =>  {\n                        e.preventDefault()\n                        setChoosenStatus(\"In Progress\") \n                        values.status = 'In Progress'}} >In Progress</Dropdown.Item>\n                    </DropdownButton>\n                        :((!isEdit)?\n                    <Form.Label className=\"font-weight-bold d-block ml-3\">{selectedTask.status}</Form.Label>\n\n\n\n\n                    :<DropdownButton id=\"dropdown-basic-button\" size=\"sm\" variant=\"secondary\" title={selectedTask.status}>\n                        <Dropdown.Item as=\"button\" value = \"New\"  onClick={(e) =>  {setSelectedTask({...selectedTask, status:e.target.value})\n                        e.preventDefault()\n                        }}>  New   </Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value = \"In Progress\"  onClick={(e) =>  {setSelectedTask({...selectedTask, status:e.target.value})\n                        e.preventDefault()\n                        }}>In Progress</Dropdown.Item>\n                    </DropdownButton>)\n                    }\n                </Col>\n                <Col className=\"py-0 mt-2\">\n                    <Form.Label className=\"font-weight-bold d-block\">Due on:</Form.Label>\n                    {(newTask)?<DatePicker  selected={startDate} onChange={date=> onDateChange(date)}  />\n                     :((!isEdit)?\n                    <Form.Label className=\"font-weight-bold d-block ml-3\">{dateFormat(new Date(selectedTask.date), \"dd/mm/yyyy\")} </Form.Label>\n                    :<DatePicker  selected={new Date(selectedTask.date)} onChange={date=> setSelectedTask({...selectedTask, date : date})}  />)\n                    }\n                    {/* <DatePicker selected={this.props.selectedTask.date} dateFormat=\"YYYY-MM-DD\" onChange={date => this.setState({dueon:date})} /> */}\n                </Col>\n            </Row>\n\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label className=\"font-weight-bold d-block\">Priority:</Form.Label>\n                {(newTask)?\n                    <Rating fractions=\"2\" initialRating={priority} {...fields.priority} onClick={onChangePriority} />\n                    :<Rating fractions=\"2\" initialRating={selectedTask.taskPriority}\n                     onClick={(e) => {\n                        setSelectedTask({...selectedTask, taskPriority:e})\n                    }\n                    } readonly={!isEdit} />\n                }\n                \n            </Form.Group>\n\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label className=\"font-weight-bold\">Category:</Form.Label>\n                {/* <Select options={this.options} onChange={date => this.setState({options:date})} /> */}\n\n                {(newTask)?\n                \n                <DropdownButton id=\"dropdown\" size=\"sm\" variant=\"secondary\" title={choosenCategoryDetails}>\n                    <Dropdown.Item as=\"button\" value=\"Home\"  onClick={(e) =>  {setchoosenCategory(\"red\") \n                        // alert.show('Oh look, an alert!')\n                        e.preventDefault()\n                        setchoosenCategoryDetails(e.target.value)\n                        values.categoryDetails = e.target.value\n                        values.category = \"red\"}}> Home</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Work\" onClick={(e) =>  {setchoosenCategory(\"blue\") \n                        e.preventDefault()\n                        values.categoryDetails = e.target.value\n                        setchoosenCategoryDetails(e.target.value)\n                        values.category = \"blue\"}}>Work</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Homework\" onClick={(e) =>  {setchoosenCategory(\"green\") \n                        e.preventDefault()\n                        values.categoryDetails = e.target.value\n                        setchoosenCategoryDetails(e.target.value)\n                        values.category = \"green\"}}>Homework</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Category\">...</Dropdown.Item>\n                 </DropdownButton>\n                    :((!isEdit)?\n                 <Row className=\"mx-0 w-25\" style={{backgroundColor: selectedTask.category, color: \"white\"}}> {selectedTask.categoryDetails}</Row>\n\n\n                 :<DropdownButton id=\"dropdown\" size=\"sm\" variant=\"secondary\" title={selectedTask.categoryDetails}>\n                    <Dropdown.Item as=\"button\" value=\"Home\" onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"red\", categoryDetails:e.target.value })\n                        e.preventDefault()\n                        }} >Home</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Work\"  onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"blue\",  categoryDetails:e.target.value})\n                        e.preventDefault()\n                        }} >Work</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Homework\"  onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"green\",  categoryDetails:e.target.value})\n                        e.preventDefault()\n                        }} >HomeWork</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"...\"  onClick={(e) =>  {setSelectedTask({...selectedTask, category:e.target.value,  categoryDetails:e.target.value})\n                        e.preventDefault()\n                        }} >...</Dropdown.Item>\n                 </DropdownButton>)\n                }\n            </Form.Group>\n\n\n            <Row className=\"justify-content-center w-100\">\n            {(newTask)?<Button variant=\"primary\" type=\"submit\" className=\"w-25\" onClick={(e) =>{handleSubmit(e)\n                hideModal()\n            }}>Save</Button>:null}\n            {(isEdit)?<Button variant=\"primary\" type=\"submit\" className=\"w-25\"  onClick={(e) => {handleEdit(e)\n                e.preventDefault()\n            }}> Save</Button>:null}\n\n            {(newTask)?<Button variant=\"secondary\" type=\"submit\" className=\"w-25 ml-3\" onClick={(e) => {hideModal()\n                e.preventDefault()\n            }}>Close</Button>:null}\n            </Row>\n\n        </Form>\n    );\n}\n\nexport default EditableTaskDescription\n","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\Calendar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Layout.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\TasksList.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sidebar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\header.js",[],["74","75"],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\build.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\styles.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sort.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Navbar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Task.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\SearchBar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\getTasks.js",[],["76","77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":141,"column":14,"nodeType":"84","messageId":"85","endLine":141,"endColumn":29},{"ruleId":"82","severity":1,"message":"86","line":144,"column":26,"nodeType":"84","messageId":"85","endLine":144,"endColumn":39},{"ruleId":"78","replacedBy":"87"},{"ruleId":"80","replacedBy":"88"},{"ruleId":"78","replacedBy":"89"},{"ruleId":"80","replacedBy":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'choosenCategory' is assigned a value but never used.","Identifier","unusedVar","'seteditValues' is assigned a value but never used.",["91"],["92"],["91"],["92"],"no-global-assign","no-unsafe-negation"]