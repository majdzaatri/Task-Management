[{"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\index.js":"1","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\reportWebVitals.js":"2","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\App.js":"3","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\EditableTaskDescription.js":"4","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\Calendar.js":"5","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Layout.js":"6","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\TasksList.js":"7","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sidebar.js":"8","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\header.js":"9","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\build.js":"10","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\styles.js":"11","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sort.js":"12","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Navbar.js":"13","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Task.js":"14","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\SearchBar.js":"15","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\getTasks.js":"16","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\LoginPage.js":"17","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\HomePage.js":"18","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\PrivateRoute.js":"19","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\auth.js":"20","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Signup.js":"21","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Login.js":"22"},{"size":643,"mtime":1613085671213,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1611433103663,"results":"25","hashOfConfig":"24"},{"size":572,"mtime":1613147953249,"results":"26","hashOfConfig":"24"},{"size":13065,"mtime":1613180558336,"results":"27","hashOfConfig":"24"},{"size":1603,"mtime":1613147953251,"results":"28","hashOfConfig":"24"},{"size":349,"mtime":1613147953257,"results":"29","hashOfConfig":"24"},{"size":4400,"mtime":1613147953273,"results":"30","hashOfConfig":"24"},{"size":954,"mtime":1613147953265,"results":"31","hashOfConfig":"24"},{"size":955,"mtime":1612441102180,"results":"32","hashOfConfig":"24"},{"size":606,"mtime":1612441102179,"results":"33","hashOfConfig":"24"},{"size":793,"mtime":1613085671193,"results":"34","hashOfConfig":"24"},{"size":2088,"mtime":1612441102185,"results":"35","hashOfConfig":"24"},{"size":1286,"mtime":1613187034864,"results":"36","hashOfConfig":"24"},{"size":1036,"mtime":1613188617710,"results":"37","hashOfConfig":"24"},{"size":568,"mtime":1613085671201,"results":"38","hashOfConfig":"24"},{"size":199,"mtime":1612627642151,"results":"39","hashOfConfig":"24"},{"size":3169,"mtime":1613169282736,"results":"40","hashOfConfig":"24"},{"size":5530,"mtime":1613169282734,"results":"41","hashOfConfig":"24"},{"size":469,"mtime":1613085671210,"results":"42","hashOfConfig":"24"},{"size":312,"mtime":1613085671212,"results":"43","hashOfConfig":"24"},{"size":3273,"mtime":1613173690693,"results":"44","hashOfConfig":"24"},{"size":3162,"mtime":1613181077641,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"1k1sgcd",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"49"},"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\index.js",["101"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\nReactDOM.render(\n  <AlertProvider template={AlertTemplate} {...options}>\n     <App />\n     </AlertProvider>,\n  document.getElementById('root')\n);\n",["102","103"],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\reportWebVitals.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\App.js",["104","105"],"import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport LoginPage from './LoginPage';\nimport HomePage from './HomePage';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <PrivateRoute path=\"/home\" component={HomePage} exact />\n          <Route path=\"/\" component={LoginPage} />\n        </Switch>\n      </div>\n    </Router>\n  )\n\n}\n\nexport default App;\n","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\EditableTaskDescription.js",["106","107"],"import React, {useState} from \"react\";\nimport {DropdownButton, Dropdown, Button, Form , Row, Col} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Rating from \"react-rating\";\n// import \"../App.css\"\nimport axios from 'axios'\nimport useFormFields from '@usereact/use-form-fields'\nimport { useAlert } from 'react-alert'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n\nvar dateFormat = require(\"dateformat\");\n\n\n\nconst EditableTaskDescription = ({isEdit, deleteTask,selectedTask, setIsEdit,newTask,setTasksCount,tasksCount,setSelectedTask ,hideModal, setIsDeleteTask, userEmail}) => {\n    const alert = useAlert()\n\n    var intialPriority = 0\n    if(newTask){\n        intialPriority = 0\n    } else {\n        intialPriority ='5'\n    }\n    const [priority, setPriority] = useState(intialPriority)\n\n    const onChangePriority = (value) => {\n        setPriority(value);\n        values.priority = value\n    }\n\n\n    \n\n    const initialValues = {\n        \"id\": Math.floor(Math.random() * 99999999),\n        \"name\": \"\",\n        \"title\": \"\",\n        \"priority\": 0,\n        \"category\": \"red\",\n        \"categoryDetails\": \"Home\",\n        \"date\": new Date(),\n        \"status\": \"New\"\n      }\n\n    \n      var inistialSelectedTask = {\n        \"id\": selectedTask.id,\n        \"name\": selectedTask.name,\n        \"title\": selectedTask.title,\n        \"priority\": selectedTask.priority,\n        \"category\": selectedTask.category,\n        \"date\": selectedTask.date,\n        \"status\": selectedTask.status\n      }     \n\n      const handleSubmit = e => {\n        e.preventDefault();\n        console.log('values: ', values)\n        console.log('Email' + userEmail)\n        axios.post('/add_task', {\n            id: values.id,\n            name: values.name,\n            title: values.title,\n            priority: values.priority,\n            category: values.category,\n            categoryDetails: values.categoryDetails,\n            date: values.date,\n            status: values.status,\n            user: userEmail\n        }).then((response) => {\n        console.log(response)\n        }).catch(() => {\n          alert('Error retrieving data!!!');\n        });  \n        console.log(values)\n        alert.show('Task \"' + values.title + '\" has been created successfully')\n        setTasksCount(!tasksCount) \n      }\n\n      const submit = () => {\n        confirmAlert({\n        //   title: 'Confirm to submit',\n          message: 'Are you sure you want to delete task \"' + selectedTask.title + '\"?',\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => {\n                axios.post('/delete_Task', {\n                    id: selectedTask.id,\n                }).then((response) => {\n                console.log(response)\n                }).catch(() => {\n                  alert('Error retrieving data!!!');\n                });  \n                setIsDeleteTask(false)\n                alert.show('Task \"' + selectedTask.title + '\" has been deleted successfully')\n                setTasksCount(!tasksCount) \n              }\n            },\n            {\n              label: 'No',\n              onClick: () => {alert.show('nothing to delete')\n              setIsDeleteTask(false)\n            }\n            }\n          ]\n        });\n      };\n\n      const handleEdit = e => {\n        e.preventDefault();\n        console.log('values: ', editValues)\n        axios.post('/update_task', {\n            id: selectedTask.id,\n            name: selectedTask.name,\n            title: selectedTask.title,\n            priority: selectedTask.taskPriority,\n            category: selectedTask.category,\n            categoryDetails: selectedTask.categoryDetails,\n            date: selectedTask.date,\n            status: selectedTask.status\n        }).then((response) => {\n        console.log(response)\n        alert.show('Task \"' + selectedTask.title + '\" has been updated successfully')\n\n        }).catch(() => {\n          alert('Error retrieving data!!!');\n        });          \n        setIsEdit(!isEdit)\n        setTasksCount(!tasksCount) \n\n  }\n        if (deleteTask === true){\n            submit()\n        }\n\n      const { values, fields } = useFormFields(initialValues)\n      const [choosenStatus, setChoosenStatus] = useState(\"New\")\n      const [choosenCategory, setchoosenCategory] = useState(\"red\")\n      const [choosenCategoryDetails, setchoosenCategoryDetails] = useState(\"Home\")\n\n      const [editValues, seteditValues] = useState(inistialSelectedTask)\n\n\n      const [startDate, setStartDate] = useState(new Date());\n\n      const onDateChange = (date) => {\n        setStartDate(date)\n        values.date = date\n    }\n    return (\n        \n        <Form onSubmit={handleSubmit} className=\"p-5\">\n        \n            <Form.Group controlId=\"exampleForm.ControlInput1\">\n                {(newTask)?<input placeholder=\"Enter task title\" {...fields.title} className=\"title-input\"  / >:\n                    ((!isEdit)?<div className=\"text-center\" style={{fontSize: \"xxx-large\"}}>{selectedTask.title}</div>\n                :<input value={selectedTask.title} onChange={(e)=> setSelectedTask({...selectedTask ,title:e.target.value})}\n                 className=\"title-input\"/>)}\n            </Form.Group>\n\n\n            <Form.Group>\n                <Form.Label placeholder=\"task Title\" className=\"font-weight-bold\">\n                    Descriptions:\n                </Form.Label>\n                {(newTask)?<Form.Control as=\"textarea\" {...fields.name} placeholder=\"Enter description if needed\" rows={3} />\n                    :<Form.Control as=\"textarea\" value={selectedTask.name} onChange={(e)=> setSelectedTask({...selectedTask ,name:e.target.value})} rows={3} disabled={!isEdit} />\n                }\n            </Form.Group>\n\n                \n            <Row className=\"my-5 mx-0 p-0\">\n                <Col className=\"pl-0\">\n                    <Form.Label className=\"font-weight-bold\">Status:</Form.Label>\n                    {(newTask)?\n                    <DropdownButton id=\"dropdown-basic-button\"  size=\"sm\" variant=\"secondary\" title={choosenStatus}>\n                        <Dropdown.Item as=\"button\"  value = 'New' onClick={(e) =>  {setChoosenStatus(\"new\") \n                        e.preventDefault()\n                        values.status = 'new'}}  >New</Dropdown.Item>\n                        <Dropdown.Item as=\"button\"  value = 'in progress'  onClick={(e) =>  {\n                        e.preventDefault()\n                        setChoosenStatus(\"In Progress\") \n                        values.status = 'In Progress'}} >In Progress</Dropdown.Item>\n                    </DropdownButton>\n                        :((!isEdit)?\n                    <Form.Label className=\"font-weight-bold d-block ml-3\">{selectedTask.status}</Form.Label>\n\n\n\n\n                    :<DropdownButton id=\"dropdown-basic-button\" size=\"sm\" variant=\"secondary\" title={selectedTask.status}>\n                        <Dropdown.Item as=\"button\" value = \"New\"  onClick={(e) =>  {setSelectedTask({...selectedTask, status:e.target.value})\n                        e.preventDefault()\n                        }}>  New   </Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value = \"In Progress\"  onClick={(e) =>  {setSelectedTask({...selectedTask, status:e.target.value})\n                        e.preventDefault()\n                        }}>In Progress</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value = \"Done\"  onClick={(e) =>  {setSelectedTask({...selectedTask, status:e.target.value})\n                        e.preventDefault()\n                        }}>Done</Dropdown.Item>\n                    </DropdownButton>)\n                    }\n                </Col>\n                <Col className=\"py-0 mt-2\">\n                    <Form.Label className=\"font-weight-bold d-block\">Due on:</Form.Label>\n                    {(newTask)?<DatePicker selected={startDate} onChange={date=> onDateChange(date)}  />\n                     :((!isEdit)?\n                    <Form.Label className=\"font-weight-bold d-block ml-3\">{dateFormat(new Date(selectedTask.date), \"dd/mm/yyyy\")} </Form.Label>\n                    :<DatePicker  selected={new Date(selectedTask.date)} onChange={date=> setSelectedTask({...selectedTask, date : date})}  />)\n                    }\n                    {/* <DatePicker selected={this.props.selectedTask.date} dateFormat=\"YYYY-MM-DD\" onChange={date => this.setState({dueon:date})} /> */}\n                </Col>\n            </Row>\n\n            <Row className=\"my-5 mx-0 p-0\">\n            <Col className=\"pl-0\">\n                <Form.Label className=\"font-weight-bold d-block\">Priority:</Form.Label>\n                {(newTask)?\n                    <Rating fractions=\"2\" initialRating={priority} {...fields.priority} onClick={onChangePriority} />\n                    :<Rating fractions=\"2\" initialRating={selectedTask.taskPriority}\n                     onClick={(e) => {\n                        setSelectedTask({...selectedTask, taskPriority:e})\n                    }\n                    } readonly={!isEdit} />\n                }\n                \n            </Col>\n            <Col className=\"pl-0\">\n                <Form.Label className=\"font-weight-bold\">Category:</Form.Label>\n                {/* <Select options={this.options} onChange={date => this.setState({options:date})} /> */}\n\n                {(newTask)?\n                \n                <DropdownButton id=\"dropdown\" size=\"sm\" variant=\"secondary\" title={choosenCategoryDetails}>\n                    <Dropdown.Item as=\"button\" style={{backgroundColor: \"rgba(250,0,0,0.15)\"}} value=\"Home\"  onClick={(e) =>  {setchoosenCategory(\"red\") \n                        // alert.show('Oh look, an alert!')\n                        e.preventDefault()\n                        setchoosenCategoryDetails(e.target.value)\n                        values.categoryDetails = e.target.value\n                        values.category = \"rgba(250,0,0,0.3)\"}}> Home</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Work\" style={{backgroundColor: \"rgba(0,0,250,0.15)\"}} onClick={(e) =>  {setchoosenCategory(\"blue\") \n                        e.preventDefault()\n                        values.categoryDetails = e.target.value\n                        setchoosenCategoryDetails(e.target.value)\n                        values.category = \"rgba(0,0,250,0.3)\"}}>Work</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Homework\" style={{backgroundColor: \"rgba(0,250,0,0.15)\"}} onClick={(e) =>  {setchoosenCategory(\"green\") \n                        e.preventDefault()\n                        values.categoryDetails = e.target.value\n                        setchoosenCategoryDetails(e.target.value)\n                        values.category = \"rgba(0,250,0,0.3)\"}}>Homework</Dropdown.Item>\n                 </DropdownButton>\n                    :((!isEdit)?\n                 <Row className=\"mx-0 w-25 justify-content-center\" style={{backgroundColor: selectedTask.category, borderRadius: \"5rem\"}}> {selectedTask.categoryDetails}</Row>\n\n\n                 :<DropdownButton id=\"dropdown\" size=\"sm\" variant=\"secondary\" title={selectedTask.categoryDetails}>\n                    <Dropdown.Item as=\"button\" value=\"Home\" style={{backgroundColor: \"rgba(250,0,0,0.15)\"}} onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"rgba(250,0,0,0.3)\", categoryDetails:e.target.value })\n                        e.preventDefault()\n                        }} >Home</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Work\" style={{backgroundColor: \"rgba(0,0,250,0.15)\"}} onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"rgba(0,0,250,0.3)\",  categoryDetails:e.target.value})\n                        e.preventDefault()\n                        }} >Work</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" value=\"Homework\" style={{backgroundColor: \"rgba(0,250,0,0.15)\"}} onClick={(e) =>  {setSelectedTask({...selectedTask, category:\"rgba(0,250,0,0.3)\",  categoryDetails:e.target.value})\n                        e.preventDefault()\n                        }} >HomeWork</Dropdown.Item>\n                 </DropdownButton>)\n                }\n            </Col>\n            </Row>\n\n\n            <Row className=\"justify-content-center w-100\">\n            {(newTask)?<Button variant=\"primary\" type=\"submit\" className=\"w-25\" onClick={(e) =>{handleSubmit(e)\n                hideModal()\n            }}>Save</Button>:null}\n            {(isEdit)?<Button variant=\"primary\" type=\"submit\" className=\"w-25\"  onClick={(e) => {handleEdit(e)\n                e.preventDefault()\n            }}> Save</Button>:null}\n\n            {(newTask)?<Button variant=\"secondary\" type=\"submit\" className=\"w-25 ml-3\" onClick={(e) => {hideModal()\n                e.preventDefault()\n            }}>Close</Button>:null}\n            </Row>\n\n        </Form>\n    );\n}\n\nexport default EditableTaskDescription;\n","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\Calendar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Layout.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\TasksList.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sidebar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\header.js",[],["108","109"],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\build.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Calendar\\styles.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Sort.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Navbar.js",["110","111"],"import React from \"react\"\nimport { FaAlignRight } from \"react-icons/fa\"\nimport {Row, Col} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Auth from '../auth';\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport logo from \"../smalLogo.png\"\n\nconst Navbar = ({userName}) => {\n  const location = useLocation();\n  const history = useHistory();\n  const name = location.name;\n  console.log(name);\n  async function handleSubmit(event) {\n    event.preventDefault();\n  \n    try {\n      await Auth.logout(()=>console.log(\"logged out\"));\n      history.push(\"/\");\n    } catch (e) {\n      alert(e.message);\n    }\n  }\n\n  return <nav className=\"navbar\">\n    <Row className=\"w-100 align-items-center\">\n      <Col lg={2} style={{width:'240px'}}> <img style={{width:'240px'}} src={logo} /></Col>\n      <Col style={{color: \"white\", fontSize: \"x-large\", fontWeight: \"bold\"  , marginRight:\"-20px\"}}>\n        <Row className=\"justify-content-end\">\n            Hello, {userName.split(\" \")[0]}\n            <button className=\"ml-5\" style={{borderRadius: \"5rem\", borderColor: \"white\", backgroundColor: \"#3f72af\", color: \"white\"}} onClick={handleSubmit}>\n              Logout\n            </button>\n        </Row>\n      </Col>\n    </Row>\n  </nav>\n}\n\nexport default Navbar\n","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Task.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\SearchBar.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\getTasks.js",[],["112","113"],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\LoginPage.js",["114","115","116","117"],"import React, {useState, useEffect} from 'react'\nimport Login from './Components/Login'\nimport Register from './Components/Signup'\nimport {Row, Col, ToggleButtonGroup, ToggleButton} from 'react-bootstrap'\nimport './App.css'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./logo.png\"\n\n\nconst LoginPage = (props) => {\n\n    const [isLogin, setIsLogin] = useState(true);\n    const [isAuth, setIsAuth] = useState(false);\n    const [userName, setUserName] = useState(\"Guest\")\n    const [userEmail, setUserEmail] = useState(\"\")\n\n    const showLogin = () => {\n        if (isLogin != true){\n            setIsLogin(true)\n        }\n    }\n\n    const showRegister = () => {\n        if (isLogin == true){\n            setIsLogin(false)\n        }\n    }\n\n    useEffect(() => {\n        if(isAuth){\n            props.history.push({pathname: \"/home\", state: {name: userName, email: userEmail}});\n        }\n    }, [userName])\n    \n\n    return(\n        <Row className=\"background\" style={{margin: \"0\", height: \"100vh\"}}>\n            <Col>\n            <Row className=\"justify-content-center\" style={{marginBottom: \"-100px\"}}>\n                <img src={logo} alt=\"Logo\" />\n            </Row>\n            <Row className=\"box-controller justify-content-center mx-auto mb-1\">\n                <div\n                    className={\"controller \" + ((isLogin)\n                    ? \"selected-controller\"\n                    : \"\")}\n                    onClick={showLogin}>\n                    Login\n                </div>\n                <div\n                    className={\"controller \" + ((!isLogin)\n                    ? \"selected-controller\"\n                    : \"\")}\n                    onClick={showRegister}>\n                    Register\n                </div>\n            </Row>\n            <Row className=\"align-items-center justify-content-center m-auto background-row\">\n                {(!isLogin)? <Register />:<Login setIsAuth={setIsAuth} setUserName={setUserName} setUserEmail={setUserEmail}/>}\n            </Row>\n            </Col>\n        </Row>\n    )\n\n};\n\nexport default LoginPage;","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\HomePage.js",["118","119","120","121"],"import './App.css';\nimport Layout from \"./Components/Layout\"\nimport React, {useState, useEffect} from \"react\"\nimport TasksData2 from './Tasks.json'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TasksList from './Components/TasksList'\nimport {Row, Col, Button} from 'react-bootstrap'\nimport Modal from \"react-bootstrap/Modal\";\nimport Calendar from './Components/Calendar/Calendar'\nimport { FaTimes, FaEdit, FaPlus, FaTrash} from 'react-icons/fa';\nimport EditableTaskDescription from \"./Components/EditableTaskDescription\"\nimport axios from 'axios'\nimport Sidebar from \"./Components/Sidebar\"\nimport LoginPage from './LoginPage'\nimport { VscArchive } from 'react-icons/vsc';\n\nfunction HomePage(props) {\n\n  const [deleteTask, setIsDeleteTask] = useState(false);\n\n  const [isEdit, setIsEdit] = useState(false);\n  const [isAdd, setIsAdd] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(TasksData2[0])\n\n  const [TasksData, setTasksData] = useState([])\n  const [TasksCount, setTasksCount] = useState(true)\n\n\n  const toggleEdit = () => setIsEdit(!isEdit)\n  const toggleDelete = () => setIsDeleteTask(true)\n\n  const hideModal = () => setIsAdd(false)\n  const showModal = () => setIsAdd(true)\n\n  const getTasks = () => {\n    let email = props.location.state.email\n    \n  axios.get('/get_task_detail', {params: {user: email}})\n  .then((response) => {\n    setTasksData(response.data)\n  }).catch(() => {\n    alert('Error retrieving data2!!!');\n  });\n  }\n\n  useEffect(() =>{\n    getTasks();\n  }, [TasksCount])\n\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const toggleSidebar = () => {\n    setIsOpen(!isOpen);\n  }\n\n    return (\n        <div>\n            <Sidebar isOpen={isOpen} selectedTask={selectedTask} setSelectedTask={setSelectedTask} setTasksCount={setTasksCount} toggleSidebar={toggleSidebar} setIsEdit={setIsEdit} isEdit={isEdit}/>\n               <Layout \n                    selectedTask={selectedTask} \n                    userName={props.location.state.name} \n                    isOpen={isOpen} \n                    toggleSidebar={toggleSidebar}\n                    hideModal={hideModal} \n                    setIsEdit= {setIsEdit}\n                    setTasksCount = {setTasksCount}\n                    tasksCount = {TasksCount} \n                    setSelectedTask = {setSelectedTask}\n                    setIsDeleteTask = {setIsDeleteTask}\n                    userEmail = {props.location.state.email}\n                    >\n                <div className=\"d-sm-none d-xs-none d-md-none\">\n                 <Modal show={isAdd} centered size=\"lg\">\n                   <Modal.Body>\n                     <EditableTaskDescription \n                      newTask={true} \n                      hideModal={hideModal} \n                      setIsEdit= {setIsEdit}\n                      setTasksCount = {setTasksCount}\n                      tasksCount = {TasksCount} \n                      selectedTask={selectedTask}\n                      setSelectedTask = {setSelectedTask}\n                      setIsDeleteTask = {setIsDeleteTask}\n                      userEmail = {props.location.state.email}\n                      />\n                  </Modal.Body>\n                </Modal>\n                </div>\n                <Row style={{height: \"94vh\"}}>\n                  <Col lg={3} style={{height: \"93vh\"}}>\n                    <Row style={{height: \"55%\"}}>\n                      <TasksList setSelectedTask={setSelectedTask}\n                        TasksData = {TasksData}\n                        toggleSidebar={toggleSidebar}\n                        toggleEdit={toggleEdit}\n                        toggleDelete={toggleDelete}\n                        isEdit={isEdit}\n                        isAdd={isAdd}\n                        setIsAdd={setIsAdd}\n                      />\n                    </Row>\n                    <Row className=\"d-none d-lg-block\">\n                      <Calendar TasksData={TasksData}/>\n                    </Row>\n                  </Col>  \n                  <Col lg={9} className=\"p-2 d-none d-lg-block task-container\" style={{boxShadow: \"30px 0px 70px 10px grey inset\"}}>\n                    <Row>\n                      <Col lg={1}>\n            \n                        {(!isEdit)?\n                          <div className=\"edit-button align-items-center \"> <FaEdit size=\"md\" color=\"white\" className=\"edit-button-icon\" onClick={toggleEdit} /> </div>\n                          : <div className=\"edit-button align-items-center mt-2\"><FaTimes size=\"md\" color=\"white\" className=\"edit-button-icon\" onClick={toggleEdit} /></div>\n                        }\n                        <div className=\"edit-button align-items-center  mt-2\"><FaPlus size=\"md\" color=\"white\" className=\"edit-button-icon\" onClick={showModal}/></div>\n                        <div className=\"delete-button align-items-center  mt-2\"> <FaTrash size=\"md\" color=\"white\" className=\"delete-button-icon\" onClick={toggleDelete} /> </div>\n                        \n                      </Col>\n                      <Col lg={11}>\n                        <EditableTaskDescription isEdit={isEdit}  setIsDeleteTask={setIsDeleteTask} deleteTask={deleteTask} tasksCount = {TasksCount}  setTasksCount = {setTasksCount} setIsEdit= {setIsEdit} setSelectedTask = {setSelectedTask}  selectedTask={selectedTask} userEmail = {props.location.state.email}/>\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Layout>\n            </div>\n    )\n}\n\nexport default HomePage;","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\PrivateRoute.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\auth.js",["122"],"class Auth {\n\n    constructor() {\n        this.authinticated = false;\n    }\n\n    login(cb) {\n        this.authinticated = true;\n        cb()\n    }\n\n    logout(cb){\n        this.authinticated = false;\n        cb()\n    }\n\n    isAuthenticated() {\n        return this.authinticated;\n    }\n}\n\nexport default new Auth;","C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Signup.js",[],"C:\\Users\\Fadi Habeeb\\Desktop\\web-Project\\Task-Management\\front-end\\src\\Components\\Login.js",["123"],"import React, {useState} from 'react';\nimport axios from 'axios'\nimport auth from '../auth';\nimport validator from 'email-validator';\n\n\n//Login Box\nconst Login = (props) => {\n  const [user, setUser] = useState({\n    email: \"\",\n    password: \"\",\n    rememberMe: false\n  });\n\n\n  const updateField = e => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const updateCheckField = e => {\n    setUser({\n      ...user,\n      [e.target.name]: e.target.checked\n    })\n  }\n\n  const handleEmail = e => {\n    setIsValidEmail(validator.validate(user.email))\n  }\n\n  const handlePassowrd = e => {\n    setIisValidPassword(user.password.length >4 ? true : false) \n   }\n\n  const  [isValidEmail, setIsValidEmail] = useState(true)\n  const  [isValidPassword, setIisValidPassword] = useState(true)\n  const  [isAuth, setIsAuth] = useState(true)\n\n\n\n\n  const handleSubmit = () => {\n    setIsValidEmail(validator.validate(user.email))\n    setIisValidPassword(user.password.length >5 ? true : false)\n    setIsAuth(true)\n    if (isValidEmail && isValidPassword){\n    axios.post('/login', {\n      email: user.email,\n      password: user.password\n    }).then((response) => {\n      if(response.data.auth){\n      auth.login(() => props.setIsAuth(true));\n      props.setUserEmail(response.data.email);\n      props.setUserName(response.data.name);\n      } else {\n        console.log(\"auth failed\")\n        setIsAuth(false)\n      }\n      console.log(response.data);\n    }).catch(() => {\n      console.log(\"Error logging user\");\n    });\n  }\n}\n\n\n  return (\n    <div className=\"inner-container\">\n      <div className=\"header\">\n        <h1>Login</h1>\n      </div>\n      <div className=\"box\">\n\n        <div className=\"input-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input\n            type=\"text\"\n            name=\"email\"\n            className=\"login-input\"\n            placeholder=\"email\"\n            onChange={(e) =>{updateField(e)\n            handleEmail()\n            }}\n            />\n             {(!isValidEmail)? <small class=\"text-danger\">Please enter a valid email</small>:\n             <div> </div>\n             }\n            \n             \n        </div>\n\n        <div className=\"input-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            className=\"login-input\"\n            placeholder=\"Password\"\n            onChange={(e) =>{updateField(e)\n              handlePassowrd()\n            }}/>\n           {(!isValidPassword)? <small class=\"text-danger\">Please enter a password with at least 6 characters</small>:\n           <div> </div>}\n        </div>\n\n\n        {(!isAuth)? <p class=\"font-weight-bold text-danger\">The email or password is inccorect</p>:\n        <div> </div>}\n        {/* <input\n         type=\"checkbox\"\n         id=\"rememberMe\"\n         name=\"rememberMe\"\n         onClick={updateCheckField}\n         /> Remember Me */}\n\n        <button\n          type=\"button\"\n          className=\"login-btn\"\n          onClick={handleSubmit}>\n          Login</button>\n        \n          \n      </div>\n    </div>\n  );\n}\n\nexport default Login;",{"ruleId":"124","severity":1,"message":"125","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":23},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":2,"column":16,"nodeType":"126","messageId":"127","endLine":2,"endColumn":24},{"ruleId":"124","severity":1,"message":"133","line":2,"column":26,"nodeType":"126","messageId":"127","endLine":2,"endColumn":35},{"ruleId":"124","severity":1,"message":"134","line":143,"column":14,"nodeType":"126","messageId":"127","endLine":143,"endColumn":29},{"ruleId":"124","severity":1,"message":"135","line":146,"column":26,"nodeType":"126","messageId":"127","endLine":146,"endColumn":39},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"124","severity":1,"message":"138","line":2,"column":10,"nodeType":"126","messageId":"127","endLine":2,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":27,"column":44,"nodeType":"141","endLine":27,"endColumn":86},{"ruleId":"128","replacedBy":"142"},{"ruleId":"130","replacedBy":"143"},{"ruleId":"124","severity":1,"message":"144","line":4,"column":19,"nodeType":"126","messageId":"127","endLine":4,"endColumn":36},{"ruleId":"124","severity":1,"message":"145","line":4,"column":38,"nodeType":"126","messageId":"127","endLine":4,"endColumn":50},{"ruleId":"146","severity":1,"message":"147","line":15,"column":21,"nodeType":"148","messageId":"149","endLine":15,"endColumn":23},{"ruleId":"146","severity":1,"message":"150","line":21,"column":21,"nodeType":"148","messageId":"149","endLine":21,"endColumn":23},{"ruleId":"124","severity":1,"message":"151","line":7,"column":19,"nodeType":"126","messageId":"127","endLine":7,"endColumn":25},{"ruleId":"124","severity":1,"message":"152","line":14,"column":8,"nodeType":"126","messageId":"127","endLine":14,"endColumn":17},{"ruleId":"124","severity":1,"message":"153","line":15,"column":10,"nodeType":"126","messageId":"127","endLine":15,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":48,"column":6,"nodeType":"156","endLine":48,"endColumn":18,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":22,"column":16,"nodeType":"160","messageId":"161","endLine":22,"endColumn":24,"fix":"162"},{"ruleId":"124","severity":1,"message":"163","line":23,"column":9,"nodeType":"126","messageId":"127","endLine":23,"endColumn":25},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["164"],"no-negated-in-lhs",["165"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'choosenCategory' is assigned a value but never used.","'seteditValues' is assigned a value but never used.",["164"],["165"],"'FaAlignRight' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["164"],["165"],"'ToggleButtonGroup' is defined but never used.","'ToggleButton' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'Button' is defined but never used.","'LoginPage' is defined but never used.","'VscArchive' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.","ArrayExpression",["166"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"167","text":"168"},"'updateCheckField' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},[311,311],"()","Update the dependencies array to be: [TasksCount, getTasks]",{"range":"171","text":"172"},[1510,1522],"[TasksCount, getTasks]"]